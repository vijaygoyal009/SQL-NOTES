
What is Database ?
------------------
A database is an organized collection of data that is stored and accessed electronically. It provides a systematic way to manage and retrieve large amounts of data efficiently. Databases are used in various applications to store, manipulate, and manage data in a structured manner.


Types of Databases :-
-------------------

Relational Databases (RDBMS):-
-----------------------------
Data is organized into tables with rows and columns.
Uses Structured Query Language (SQL) for querying and managing data.
Examples: MySQL, PostgreSQL, Oracle


Non-Relational Databases (NoSQL):
----------------------------------
Data can be stored in various formats such as key-value pairs, documents, columns, or graphs.
Provides flexibility in handling unstructured or semi-structured data.
Examples: MongoDB (document-based), Redis (key-value), Cassandra (column-family), Neo4j (graph-based)



------------------------------------------------------------------------------------------------------------------------



What is SQL ?
--------------
SQL, or Structured Query Language, is a standard programming language used to manage and manipulate relational databases

SQL is used across various database management systems, including MySQL, PostgreSQL, Microsoft SQL Server, and SQLite


------------------------------------------------------------------------------------------------------------------------


what is MySQL ?
------------------
MySQL is an open-source relational database management system (RDBMS) that uses SQL (Structured Query Language) to manage and manipulate databases. It organizes data into tables and allows users to perform operations such as querying, updating, and managing data efficiently.
MySQL is ideal for both small and large applications.
MySQL was first released in 1995
MySQL is developed, distributed, and supported by Oracle Corporation


------------------------------------------------------------------------------------------------------------------------


The MySQL CREATE DATABASE Statement
-------------------------------------
The CREATE DATABASE statement is used to create a new SQL database.

Syntax ----> CREATE DATABASE databasename;



------------------------------------------------------------------------------------------------------------------------



(See all databases using this command) ----> SHOW DATABASES;
--------------------------------------



------------------------------------------------------------------------------------------------------------------------



The MySQL DROP DATABASE Statement
---------------------------------
The DROP DATABASE statement is used to drop an existing SQL database.

Syntax ----> DROP DATABASE databasename;
Example -----> DROP DATABASE Student;



------------------------------------------------------------------------------------------------------------------------



The MySQL CREATE TABLE Statement
------------------------------------
The CREATE TABLE statement is used to create a new table in a database.


Syntax ----> 
            CREATE TABLE table_name (
                column1 datatype,
                column2 datatype,
                column3 datatype,
            ....
            );


The column parameters specify the names of the columns of the table.

The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).



Example ----> 
            CREATE TABLE Persons (
                PersonID int,
                LastName varchar(255),
                FirstName varchar(255),
                Address varchar(255),
                City varchar(255)
            );





Create Table Using Another Table
---------------------------------
A copy of an existing table can also be created using CREATE TABLE.

The new table gets the same column definitions. All columns or specific columns can be selected.

If you create a new table using an existing table, the new table will be filled with the existing values from the old table

Syntax ---->
            CREATE TABLE new_table_name AS
                SELECT column1, column2,...
                FROM existing_table_name
                WHERE ....;


------------------------------------------------------------------------------------------------------------------------



The MySQL DROP TABLE Statement
-------------------------------
The DROP TABLE statement is used to drop an existing table in a database.

Syntax ----> DROP TABLE table_name;
Example ----> DROP TABLE Student

Note: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the    
table!




MySQL TRUNCATE TABLE
---------------------
The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.


Syntax ----> TRUNCATE TABLE table_name;



------------------------------------------------------------------------------------------------------------------------




                                MySQL ALTER TABLE Statement
                                ---------------------------
The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

The ALTER TABLE statement is also used to add and drop various constraints on an existing table.




ALTER TABLE - ADD Column
-------------------------
Syntax ----> 
            ALTER TABLE table_name
            ADD column_name datatype;


Example ---->
            ALTER TABLE Customers
            ADD Email varchar(255);




ALTER TABLE - DROP COLUMN
---------------------------
To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):


Syntax ---->
            ALTER TABLE table_name
            DROP COLUMN column_name;


Example ---->
            ALTER TABLE Customers
            DROP COLUMN Email;




ALTER TABLE - MODIFY COLUMN
---------------------------
To change the data type of a column in a table, use the following syntax:


Syntax ---->
            ALTER TABLE table_name
            MODIFY COLUMN column_name datatype;


Example ---->
            ALTER TABLE Employee
            MODIFY COLUMN email integer;





------------------------------------------------------------------------------------------------------------------------



MySQL Constraints ---->
------------------
SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.




NOT NULL ----> Ensures that a column cannot have a NULL value
UNIQUE ----> Ensures that all values in a column are different
PRIMARY KEY ----> A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY ----> Prevents actions that would destroy links between tables
CHECK ----> Ensures that the values in a column satisfies a specific condition
DEFAULT ----> Sets a default value for a column if no value is specified
CREATE INDEX ----> Used to create and retrieve data from the database very quickly





                        MySQL NOT NULL Constraint
                        -------------------------
By default, a column can hold NULL values.

The NOT NULL constraint enforces a column to NOT accept NULL values.

This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.




NOT NULL on CREATE TABLE
-------------------------
The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept NULL values when the "Persons" table is created:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255) NOT NULL,
                Age int
            );



NOT NULL on ALTER TABLE
------------------------
To create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            MODIFY Age int NOT NULL;







                                    MySQL UNIQUE Constraint
                                    -----------------------
The UNIQUE constraint ensures that all values in a column are different.

Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.

A PRIMARY KEY constraint automatically has a UNIQUE constraint.

However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.




UNIQUE Constraint on CREATE TABLE
-----------------------------------
The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                UNIQUE (ID)
            );


To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                CONSTRAINT UC_Person UNIQUE (ID,LastName)
            );





UNIQUE Constraint on ALTER TABLE
---------------------------------
To create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ADD UNIQUE (ID);



To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);






DROP a UNIQUE Constraint
-------------------------
To drop a UNIQUE constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            DROP INDEX UC_Person;







                                            PRIMARY KEY Constraint
                                       ------------------------------

The PRIMARY KEY constraint uniquely identifies each record in a table.

Primary keys must contain UNIQUE values, and cannot contain NULL values.

A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).



PRIMARY KEY on CREATE TABLE  ----->
----------------------------
The following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:


Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                PRIMARY KEY (ID)
            );



To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
            );


Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).





PRIMARY KEY on ALTER TABLE
-----------------------------
To create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:


Example ---->
            ALTER TABLE Persons
            ADD PRIMARY KEY (ID);


To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:


Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);


Note: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain NULL values (when the table was first created).





DROP a PRIMARY KEY Constraint
------------------------------
To drop a PRIMARY KEY constraint, use the following SQL:

Example ---->
        ALTER TABLE Persons
        DROP PRIMARY KEY;







                                        MySQL FOREIGN KEY Constraint
                                        -----------------------------

A Foreign Key is a field (or collection of fields) in a relational database table that establishes a link between the data in two tables. It is a reference to the primary key in another table, ensuring that the relationship between the two tables maintains referential integrity. The foreign key acts as a "pointer" to a unique record in the other table, enforcing rules that the value in the foreign key column must either match a value in the primary key column of the referenced table or be null (if allowed).

In summary, a foreign key:

Links two tables by creating a relationship between them.
Enforces referential integrity, ensuring that invalid data is not inserted into the foreign key column.
Typically points to the primary key in another table.
For example, in a database with Orders and Customers tables, the customer_id in the Orders table would be a foreign key referencing the id field in the Customers table. This ensures that every order is linked to a valid customer.





FOREIGN KEY on CREATE TABLE
----------------------------
The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:

Example ---->
        CREATE TABLE Orders (
            OrderID int NOT NULL,
            OrderNumber int NOT NULL,
            PersonID int,
            PRIMARY KEY (OrderID),
            FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
        );





FOREIGN KEY on ALTER TABLE
--------------------------
To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:

Example ---->
            ALTER TABLE Orders
            ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);







                                        
                                        MySQL CHECK Constraint
                                        ----------------------

The CHECK constraint is used to limit the value range that can be placed in a column.

If you define a CHECK constraint on a column it will allow only certain values for this column.

If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.




CHECK on CREATE TABLE
---------------------
The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                  (Age>=18)
            );




To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL 

syntax:---->

            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                City varchar(255),
                CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
            );



CHECK on ALTER TABLE
--------------------
To create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ADD CHECK (Age>=18);

To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:

Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');


DROP a CHECK Constraint
------------------------
To drop a CHECK constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            DROP CHECK CHK_PersonAge;







                                MySQL DEFAULT Constraint
                                ------------------------
The DEFAULT constraint is used to set a default value for a column.
The default value will be added to all new records, if no other value is specified.




DEFAULT on CREATE TABLE
-----------------------
The following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);



DEFAULT on ALTER TABLE
----------------------
To create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ALTER City SET DEFAULT 'Sandnes';


DROP a DEFAULT Constraint
-------------------------
To drop a DEFAULT constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ALTER City DROP DEFAULT;







                                    MySQL CREATE INDEX Statement
                                    ----------------------------

The CREATE INDEX statement is used to create indexes in tables.

Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.

Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.





CREATE INDEX Syntax
-------------------
Creates an index on a table. Duplicate values are allowed:


Example ---->
            CREATE INDEX index_name
            ON table_name (column1, column2, ...);


CREATE UNIQUE INDEX Syntax
---------------------------
Creates a unique index on a table. Duplicate values are not allowed:


Example ---->
            CREATE UNIQUE INDEX index_name
            ON table_name (column1, column2, ...);






------------------------------------------------------------------------------------------------------------------------



                                            MySQL AUTO INCREMENT Field
                                            --------------------------

What is an AUTO INCREMENT Field?
-------------------------------
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

Often this is the primary key field that we would like to be created automatically every time a new record is inserted.




MySQL AUTO_INCREMENT Keyword
-----------------------------
MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.

By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

The following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:

Example ---->
            CREATE TABLE Persons (
                Personid int NOT NULL AUTO_INCREMENT,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                PRIMARY KEY (Personid)
            );




To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:

Example ---->  ALTER TABLE Persons AUTO_INCREMENT=100;


When we insert a new record into the "Persons" table, we do NOT have to specify a value for the "Personid" column (a unique value will be added automatically):




------------------------------------------------------------------------------------------------------------------------

                                                    Views
                                                    -----


MySQL Views ek virtual table hoti hai jo ek ya zyada tables ke data ka result set hoti hai. Views ko hum ek tarah se "stored query" keh sakte hain, jo aapko data ko simplify karne ya restrict karne ke liye help karti hai bina actual data ko change kiye.

Yeh ek tarah ka abstraction layer provide karti hai, jisse complex queries ko simple bana ke dikhaya ja sakta hai. Views ka data dynamically update hota hai, toh jab bhi aap view ko access karte ho, us waqt ki latest data ko fetch karta hai.


Kyo use hoti hai:
----------------
(1) Data ko simplify karne ke liye:-
Aap complex queries ko ek view mein convert kar sakte ho aur future mein bas view ko access karna hota hai.

(2) Security improve karne ke liye:-
Agar aapko kisi user ko kuch specific columns ya rows ka access dena hai bina pura table dikhaye, toh aap views ka use kar sakte ho.

(3) Data ko organize karne ke liye:-
Multiple tables se join kar ke complex result set ko ek simple view mein convert kar sakte ho.

Syntax: ----->
                CREATE VIEW view_name AS
                SELECT column1, column2, ...
                FROM table_name
                WHERE condition;


Example:---->

Maan lo aapke paas ek employees table hai jisme employee ka naam aur unka salary hai. Aapko bas un employees ka data dikhana hai jinki salary 50,000 se zyada hai. Is case mein aap ek view create kar sakte ho:

                CREATE VIEW high_salary_employees AS
                SELECT name, salary
                FROM employees
                WHERE salary > 50000;




Ab jab bhi aap high_salary_employees view ko access karoge, aapko sirf wo employees ka data dikhega jinki salary 50,000 se zyada hai. Query example:

Use this view ----> SELECT * FROM high_salary_employees;

Is view ko use karne se aapko repeatedly complex SELECT queries likhne ki zarurat nahi padegi.



------------------------------------------------------------------------------------------------------------------------





                                        MySQL SELECT Statement
                                        ----------------------


The MySQL SELECT Statement
--------------------------
The SELECT statement is used to select data from a database.
The data returned is stored in a result table, called the result-set.



SELECT Syntax ---->
            SELECT column1, column2, ...
            FROM table_name;

Here, column1, column2, ... are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax:

Syntax ---->
            SELECT * FROM table_name;




------------------------------------------------------------------------------------------------------------------------


                                    MySQL WHERE Clause
                                    ------------------

The MySQL WHERE Clause
-----------------------
The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.


WHERE Syntax ---->
                SELECT column1, column2, ...
                FROM table_name
                WHERE condition;

Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!


WHERE Clause Example
----------
                SELECT * FROM Customers
                WHERE Country = 'Mexico';




------------------------------------------------------------------------------------------------------------------------


                                        MySQL AND, OR and NOT Operators
                                        -------------------------------

The MySQL AND, OR and NOT Operators
------------------------------------
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax ---->
----------
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 AND condition2 AND condition3 ...;


OR Syntax ---->
---------
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 OR condition2 OR condition3 ...;


NOT Syntax ---->
----------
            SELECT column1, column2, ...
            FROM table_name
            WHERE NOT condition;

------------------------------------------------------------------------------------------------------------------------

                                MySQL ORDER BY Keyword
                                ----------------------


The MySQL ORDER BY Keyword
--------------------------
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

ORDER BY Syntax ---->
--------
                    SELECT column1, column2, ...
                    FROM table_name
                    ORDER BY column1, column2, ... ASC|DESC;




------------------------------------------------------------------------------------------------------------------------


                                    MySQL INSERT INTO Statement
                                    ---------------------------

The MySQL INSERT INTO Statement
-------------------------------
The INSERT INTO statement is used to insert new records in a table.



INSERT INTO Syntax
------------------
It is possible to write the INSERT INTO statement in two ways:




1. Specify both the column names and the values to be inserted:

Syntax ---->
            INSERT INTO table_name (column1, column2, column3, ...)
            VALUES (value1, value2, value3, ...);


The following SQL statement inserts a new record in the "Customers" table:

Example ---->
            INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
            VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');







2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

Syntax ---->
            INSERT INTO table_name
            VALUES (value1, value2, value3, ...);

Example ---->
            INSERT INTO Customers 
            VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');



