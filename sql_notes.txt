
What is Database ?
------------------
A database is an organized collection of data that is stored and accessed electronically. It provides a systematic way to manage and retrieve large amounts of data efficiently. Databases are used in various applications to store, manipulate, and manage data in a structured manner.


Types of Databases :-
-------------------

Relational Databases (RDBMS):-
-----------------------------
Data is organized into tables with rows and columns.
Uses Structured Query Language (SQL) for querying and managing data.
Examples: MySQL, PostgreSQL, Oracle


Non-Relational Databases (NoSQL):
----------------------------------
Data can be stored in various formats such as key-value pairs, documents, columns, or graphs.
Provides flexibility in handling unstructured or semi-structured data.
Examples: MongoDB (document-based), Redis (key-value), Cassandra (column-family), Neo4j (graph-based)



------------------------------------------------------------------------------------------------------------------------



What is SQL ?
--------------
SQL, or Structured Query Language, is a standard programming language used to manage and manipulate relational databases

SQL is used across various database management systems, including MySQL, PostgreSQL, Microsoft SQL Server, and SQLite


------------------------------------------------------------------------------------------------------------------------


what is MySQL ?
------------------
MySQL is an open-source relational database management system (RDBMS) that uses SQL (Structured Query Language) to manage and manipulate databases. It organizes data into tables and allows users to perform operations such as querying, updating, and managing data efficiently.
MySQL is ideal for both small and large applications.
MySQL was first released in 1995
MySQL is developed, distributed, and supported by Oracle Corporation


------------------------------------------------------------------------------------------------------------------------


The MySQL CREATE DATABASE Statement
-------------------------------------
The CREATE DATABASE statement is used to create a new SQL database.

Syntax ----> CREATE DATABASE databasename;



------------------------------------------------------------------------------------------------------------------------



(See all databases using this command) ----> SHOW DATABASES;
--------------------------------------



------------------------------------------------------------------------------------------------------------------------



The MySQL DROP DATABASE Statement
---------------------------------
The DROP DATABASE statement is used to drop an existing SQL database.

Syntax ----> DROP DATABASE databasename;
Example -----> DROP DATABASE Student;



------------------------------------------------------------------------------------------------------------------------



The MySQL CREATE TABLE Statement
------------------------------------
The CREATE TABLE statement is used to create a new table in a database.


Syntax ----> 
            CREATE TABLE table_name (
                column1 datatype,
                column2 datatype,
                column3 datatype,
            ....
            );


The column parameters specify the names of the columns of the table.

The datatype parameter specifies the type of data the column can hold (e.g. varchar, integer, date, etc.).



Example ----> 
            CREATE TABLE Persons (
                PersonID int,
                LastName varchar(255),
                FirstName varchar(255),
                Address varchar(255),
                City varchar(255)
            );





Create Table Using Another Table
---------------------------------
A copy of an existing table can also be created using CREATE TABLE.

The new table gets the same column definitions. All columns or specific columns can be selected.

If you create a new table using an existing table, the new table will be filled with the existing values from the old table

Syntax ---->
            CREATE TABLE new_table_name AS
                SELECT column1, column2,...
                FROM existing_table_name
                WHERE ....;


------------------------------------------------------------------------------------------------------------------------



The MySQL DROP TABLE Statement
-------------------------------
The DROP TABLE statement is used to drop an existing table in a database.

Syntax ----> DROP TABLE table_name;
Example ----> DROP TABLE Student

Note: Be careful before dropping a table. Deleting a table will result in loss of complete information stored in the    
table!




MySQL TRUNCATE TABLE
---------------------
The TRUNCATE TABLE statement is used to delete the data inside a table, but not the table itself.


Syntax ----> TRUNCATE TABLE table_name;



------------------------------------------------------------------------------------------------------------------------




                                MySQL ALTER TABLE Statement
                                ---------------------------
The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.

The ALTER TABLE statement is also used to add and drop various constraints on an existing table.




ALTER TABLE - ADD Column
-------------------------
Syntax ----> 
            ALTER TABLE table_name
            ADD column_name datatype;


Example ---->
            ALTER TABLE Customers
            ADD Email varchar(255);




ALTER TABLE - DROP COLUMN
---------------------------
To delete a column in a table, use the following syntax (notice that some database systems don't allow deleting a column):


Syntax ---->
            ALTER TABLE table_name
            DROP COLUMN column_name;


Example ---->
            ALTER TABLE Customers
            DROP COLUMN Email;




ALTER TABLE - MODIFY COLUMN
---------------------------
To change the data type of a column in a table, use the following syntax:


Syntax ---->
            ALTER TABLE table_name
            MODIFY COLUMN column_name datatype;


Example ---->
            ALTER TABLE Employee
            MODIFY COLUMN email integer;





------------------------------------------------------------------------------------------------------------------------



MySQL Constraints ---->
------------------
SQL constraints are used to specify rules for the data in a table.

Constraints are used to limit the type of data that can go into a table. This ensures the accuracy and reliability of the data in the table. If there is any violation between the constraint and the data action, the action is aborted.

Constraints can be column level or table level. Column level constraints apply to a column, and table level constraints apply to the whole table.




NOT NULL ----> Ensures that a column cannot have a NULL value
UNIQUE ----> Ensures that all values in a column are different
PRIMARY KEY ----> A combination of a NOT NULL and UNIQUE. Uniquely identifies each row in a table
FOREIGN KEY ----> Prevents actions that would destroy links between tables
CHECK ----> Ensures that the values in a column satisfies a specific condition
DEFAULT ----> Sets a default value for a column if no value is specified
CREATE INDEX ----> Used to create and retrieve data from the database very quickly





                        MySQL NOT NULL Constraint
                        -------------------------
By default, a column can hold NULL values.

The NOT NULL constraint enforces a column to NOT accept NULL values.

This enforces a field to always contain a value, which means that you cannot insert a new record, or update a record without adding a value to this field.




NOT NULL on CREATE TABLE
-------------------------
The following SQL ensures that the "ID", "LastName", and "FirstName" columns will NOT accept NULL values when the "Persons" table is created:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255) NOT NULL,
                Age int
            );



NOT NULL on ALTER TABLE
------------------------
To create a NOT NULL constraint on the "Age" column when the "Persons" table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            MODIFY Age int NOT NULL;







                                    MySQL UNIQUE Constraint
                                    -----------------------
The UNIQUE constraint ensures that all values in a column are different.

Both the UNIQUE and PRIMARY KEY constraints provide a guarantee for uniqueness for a column or set of columns.

A PRIMARY KEY constraint automatically has a UNIQUE constraint.

However, you can have many UNIQUE constraints per table, but only one PRIMARY KEY constraint per table.




UNIQUE Constraint on CREATE TABLE
-----------------------------------
The following SQL creates a UNIQUE constraint on the "ID" column when the "Persons" table is created:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                UNIQUE (ID)
            );


To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                CONSTRAINT UC_Person UNIQUE (ID,LastName)
            );





UNIQUE Constraint on ALTER TABLE
---------------------------------
To create a UNIQUE constraint on the "ID" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ADD UNIQUE (ID);



To name a UNIQUE constraint, and to define a UNIQUE constraint on multiple columns, use the following SQL syntax:

Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT UC_Person UNIQUE (ID,LastName);






DROP a UNIQUE Constraint
-------------------------
To drop a UNIQUE constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            DROP INDEX UC_Person;







                                            PRIMARY KEY Constraint
                                       ------------------------------

The PRIMARY KEY constraint uniquely identifies each record in a table.

Primary keys must contain UNIQUE values, and cannot contain NULL values.

A table can have only ONE primary key; and in the table, this primary key can consist of single or multiple columns (fields).



PRIMARY KEY on CREATE TABLE  ----->
----------------------------
The following SQL creates a PRIMARY KEY on the "ID" column when the "Persons" table is created:


Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                PRIMARY KEY (ID)
            );



To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)
            );


Note: In the example above there is only ONE PRIMARY KEY (PK_Person). However, the VALUE of the primary key is made up of TWO COLUMNS (ID + LastName).





PRIMARY KEY on ALTER TABLE
-----------------------------
To create a PRIMARY KEY constraint on the "ID" column when the table is already created, use the following SQL:


Example ---->
            ALTER TABLE Persons
            ADD PRIMARY KEY (ID);


To allow naming of a PRIMARY KEY constraint, and for defining a PRIMARY KEY constraint on multiple columns, use the following SQL syntax:


Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName);


Note: If you use ALTER TABLE to add a primary key, the primary key column(s) must have been declared to not contain NULL values (when the table was first created).





DROP a PRIMARY KEY Constraint
------------------------------
To drop a PRIMARY KEY constraint, use the following SQL:

Example ---->
        ALTER TABLE Persons
        DROP PRIMARY KEY;







                                        MySQL FOREIGN KEY Constraint
                                        -----------------------------

A Foreign Key is a field (or collection of fields) in a relational database table that establishes a link between the data in two tables. It is a reference to the primary key in another table, ensuring that the relationship between the two tables maintains referential integrity. The foreign key acts as a "pointer" to a unique record in the other table, enforcing rules that the value in the foreign key column must either match a value in the primary key column of the referenced table or be null (if allowed).

In summary, a foreign key:

Links two tables by creating a relationship between them.
Enforces referential integrity, ensuring that invalid data is not inserted into the foreign key column.
Typically points to the primary key in another table.
For example, in a database with Orders and Customers tables, the customer_id in the Orders table would be a foreign key referencing the id field in the Customers table. This ensures that every order is linked to a valid customer.





FOREIGN KEY on CREATE TABLE
----------------------------
The following SQL creates a FOREIGN KEY on the "PersonID" column when the "Orders" table is created:

Example ---->
        CREATE TABLE Orders (
            OrderID int NOT NULL,
            OrderNumber int NOT NULL,
            PersonID int,
            PRIMARY KEY (OrderID),
            FOREIGN KEY (PersonID) REFERENCES Persons(PersonID)
        );





FOREIGN KEY on ALTER TABLE
--------------------------
To create a FOREIGN KEY constraint on the "PersonID" column when the "Orders" table is already created, use the following SQL:

Example ---->
            ALTER TABLE Orders
            ADD FOREIGN KEY (PersonID) REFERENCES Persons(PersonID);







                                        
                                        MySQL CHECK Constraint
                                        ----------------------

The CHECK constraint is used to limit the value range that can be placed in a column.

If you define a CHECK constraint on a column it will allow only certain values for this column.

If you define a CHECK constraint on a table it can limit the values in certain columns based on values in other columns in the row.




CHECK on CREATE TABLE
---------------------
The following SQL creates a CHECK constraint on the "Age" column when the "Persons" table is created. The CHECK constraint ensures that the age of a person must be 18, or older:

Example ---->
            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                  (Age>=18)
            );




To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL 

syntax:---->

            CREATE TABLE Persons (
                ID int NOT NULL,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                City varchar(255),
                CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
            );



CHECK on ALTER TABLE
--------------------
To create a CHECK constraint on the "Age" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ADD CHECK (Age>=18);

To allow naming of a CHECK constraint, and for defining a CHECK constraint on multiple columns, use the following SQL syntax:

Example ---->
            ALTER TABLE Persons
            ADD CONSTRAINT CHK_PersonAge CHECK (Age>=18 AND City='Sandnes');


DROP a CHECK Constraint
------------------------
To drop a CHECK constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            DROP CHECK CHK_PersonAge;







                                MySQL DEFAULT Constraint
                                ------------------------
The DEFAULT constraint is used to set a default value for a column.
The default value will be added to all new records, if no other value is specified.




DEFAULT on CREATE TABLE
-----------------------
The following SQL sets a DEFAULT value for the "City" column when the "Persons" table is created:

CREATE TABLE Persons (
    ID int NOT NULL,
    LastName varchar(255) NOT NULL,
    FirstName varchar(255),
    Age int,
    City varchar(255) DEFAULT 'Sandnes'
);



DEFAULT on ALTER TABLE
----------------------
To create a DEFAULT constraint on the "City" column when the table is already created, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ALTER City SET DEFAULT 'Sandnes';


DROP a DEFAULT Constraint
-------------------------
To drop a DEFAULT constraint, use the following SQL:

Example ---->
            ALTER TABLE Persons
            ALTER City DROP DEFAULT;







                                    MySQL CREATE INDEX Statement
                                    ----------------------------

The CREATE INDEX statement is used to create indexes in tables.

Indexes are used to retrieve data from the database more quickly than otherwise. The users cannot see the indexes, they are just used to speed up searches/queries.

Note: Updating a table with indexes takes more time than updating a table without (because the indexes also need an update). So, only create indexes on columns that will be frequently searched against.





CREATE INDEX Syntax
-------------------
Creates an index on a table. Duplicate values are allowed:


Example ---->
            CREATE INDEX index_name
            ON table_name (column1, column2, ...);


CREATE UNIQUE INDEX Syntax
---------------------------
Creates a unique index on a table. Duplicate values are not allowed:


Example ---->
            CREATE UNIQUE INDEX index_name
            ON table_name (column1, column2, ...);






------------------------------------------------------------------------------------------------------------------------



                                            MySQL AUTO INCREMENT Field
                                            --------------------------

What is an AUTO INCREMENT Field?
-------------------------------
Auto-increment allows a unique number to be generated automatically when a new record is inserted into a table.

Often this is the primary key field that we would like to be created automatically every time a new record is inserted.




MySQL AUTO_INCREMENT Keyword
-----------------------------
MySQL uses the AUTO_INCREMENT keyword to perform an auto-increment feature.

By default, the starting value for AUTO_INCREMENT is 1, and it will increment by 1 for each new record.

The following SQL statement defines the "Personid" column to be an auto-increment primary key field in the "Persons" table:

Example ---->
            CREATE TABLE Persons (
                Personid int NOT NULL AUTO_INCREMENT,
                LastName varchar(255) NOT NULL,
                FirstName varchar(255),
                Age int,
                PRIMARY KEY (Personid)
            );




To let the AUTO_INCREMENT sequence start with another value, use the following SQL statement:

Example ---->  ALTER TABLE Persons AUTO_INCREMENT=100;


When we insert a new record into the "Persons" table, we do NOT have to specify a value for the "Personid" column (a unique value will be added automatically):




------------------------------------------------------------------------------------------------------------------------

                                                    Views
                                                    -----


MySQL Views ek virtual table hoti hai jo ek ya zyada tables ke data ka result set hoti hai. Views ko hum ek tarah se "stored query" keh sakte hain, jo aapko data ko simplify karne ya restrict karne ke liye help karti hai bina actual data ko change kiye.

Yeh ek tarah ka abstraction layer provide karti hai, jisse complex queries ko simple bana ke dikhaya ja sakta hai. Views ka data dynamically update hota hai, toh jab bhi aap view ko access karte ho, us waqt ki latest data ko fetch karta hai.


Kyo use hoti hai:
----------------
(1) Data ko simplify karne ke liye:-
Aap complex queries ko ek view mein convert kar sakte ho aur future mein bas view ko access karna hota hai.

(2) Security improve karne ke liye:-
Agar aapko kisi user ko kuch specific columns ya rows ka access dena hai bina pura table dikhaye, toh aap views ka use kar sakte ho.

(3) Data ko organize karne ke liye:-
Multiple tables se join kar ke complex result set ko ek simple view mein convert kar sakte ho.

Syntax: ----->
                CREATE VIEW view_name AS
                SELECT column1, column2, ...
                FROM table_name
                WHERE condition;


Example:---->

Maan lo aapke paas ek employees table hai jisme employee ka naam aur unka salary hai. Aapko bas un employees ka data dikhana hai jinki salary 50,000 se zyada hai. Is case mein aap ek view create kar sakte ho:

                CREATE VIEW high_salary_employees AS
                SELECT name, salary
                FROM employees
                WHERE salary > 50000;




Ab jab bhi aap high_salary_employees view ko access karoge, aapko sirf wo employees ka data dikhega jinki salary 50,000 se zyada hai. Query example:

Use this view ----> SELECT * FROM high_salary_employees;

Is view ko use karne se aapko repeatedly complex SELECT queries likhne ki zarurat nahi padegi.



------------------------------------------------------------------------------------------------------------------------





                                        MySQL SELECT Statement
                                        ----------------------


The MySQL SELECT Statement
--------------------------
The SELECT statement is used to select data from a database.
The data returned is stored in a result table, called the result-set.



SELECT Syntax ---->
            SELECT column1, column2, ...
            FROM table_name;

Here, column1, column2, ... are the field names of the table you want to select data from. If you want to select all the fields available in the table, use the following syntax:

Syntax ---->
            SELECT * FROM table_name;




------------------------------------------------------------------------------------------------------------------------


                                    MySQL WHERE Clause
                                    ------------------

The MySQL WHERE Clause
-----------------------
The WHERE clause is used to filter records.
It is used to extract only those records that fulfill a specified condition.


WHERE Syntax ---->
                SELECT column1, column2, ...
                FROM table_name
                WHERE condition;

Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!


WHERE Clause Example
----------
                SELECT * FROM Customers
                WHERE Country = 'Mexico';




------------------------------------------------------------------------------------------------------------------------


                                        MySQL AND, OR and NOT Operators
                                        -------------------------------

The MySQL AND, OR and NOT Operators
------------------------------------
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.

AND Syntax ---->
----------
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 AND condition2 AND condition3 ...;


OR Syntax ---->
---------
            SELECT column1, column2, ...
            FROM table_name
            WHERE condition1 OR condition2 OR condition3 ...;


NOT Syntax ---->
----------
            SELECT column1, column2, ...
            FROM table_name
            WHERE NOT condition;

------------------------------------------------------------------------------------------------------------------------

                                MySQL ORDER BY Keyword
                                ----------------------


The MySQL ORDER BY Keyword
--------------------------
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

ORDER BY Syntax ---->
--------
                    SELECT column1, column2, ...
                    FROM table_name
                    ORDER BY column1, column2, ... ASC|DESC;




------------------------------------------------------------------------------------------------------------------------


                                    MySQL INSERT INTO Statement
                                    ---------------------------

The MySQL INSERT INTO Statement
-------------------------------
The INSERT INTO statement is used to insert new records in a table.



INSERT INTO Syntax
------------------
It is possible to write the INSERT INTO statement in three ways:




1. Specify both the column names and the values to be inserted:

Syntax ---->
            INSERT INTO table_name (column1, column2, column3, ...)
            VALUES (value1, value2, value3, ...);


The following SQL statement inserts a new record in the "Customers" table:

Example ---->
            INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
            VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');







2. If you are adding values for all the columns of the table, you do not need to specify the column names in the SQL query. However, make sure the order of the values is in the same order as the columns in the table. Here, the INSERT INTO syntax would be as follows:

Syntax ---->
            INSERT INTO table_name
            VALUES (value1, value2, value3, ...);

Example ---->
            INSERT INTO Customers 
            VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');



3. If you are adding values for a specific column so you want to declared specific column name or according values.

Syntax ----->
            INSERT INTO Customers('name','salary')
            VALUES ('Ram jain', 34);


------------------------------------------------------------------------------------------------------------------------




                                                MySQL NULL Values
                                                -----------------
What is a NULL Value?
---------------------
A field with a NULL value is a field with no value.

If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.

Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one     that has been left blank during record creation!




How to Test for NULL Values?
----------------------------
It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
We will have to use the IS NULL and IS NOT NULL operators instead.




The IS NULL Operator
--------------------
The IS NULL operator is used to test for empty values (NULL values).
The following SQL lists all customers with a NULL value in the "Address" field:

Example ---->
            SELECT CustomerName, ContactName, Address
            FROM Customers
            WHERE Address IS NULL;



The IS NOT NULL Operator
------------------------
The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).
The following SQL lists all customers with a value in the "Address" field:

Example ---->
            SELECT CustomerName, ContactName, Address
            FROM Customers
            WHERE Address IS NOT NULL;



------------------------------------------------------------------------------------------------------------------------



                                        MySQL UPDATE Statement
                                        ----------------------

The MySQL UPDATE Statement
--------------------------
The UPDATE statement is used to modify the existing records in a table.

UPDATE Syntax ---->
                    UPDATE table_name
                    SET column1 = value1, column2 = value2, ...
                    WHERE condition;



Note: Be careful when updating records in a table! Notice the WHERE clause in the UPDATE statement. The WHERE clause specifies which record(s) that should be updated. If you omit the WHERE clause, all records in the table will be updated!


Example to update single record---->
                                    UPDATE employee     
                                    SET name='Vijay Goyal',city="indore"
                                    where id = 1;


Example to update Multiple record---->
                                    UPDATE employee     
                                    SET pincode=452006
                                    where city = 'indore';



-----------------------------------------------------------------------------------------------------------------------



                                        MySQL DELETE Statement
                                        ----------------------
The MySQL DELETE Statement
--------------------------
The DELETE statement is used to delete existing records in a table.

DELETE Syntax ---->
-------------
                DELETE FROM table_name WHERE condition;



Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted. If you omit the WHERE clause, all records in the table will be deleted!



Example ---->
    (i) Delete from company_db where id=1;
    (2) Delete from company_db where city = 'indore';


-----------------------------------------------------------------------------------------------------------------------


                                          MySQL LIMIT Clause and OFFSET
                                        -------------------------------

Limit => Limit ka mtlb hota he ki aapko kitne records show karna he table me se.
Offset => Offset ka mtlb hota he ki aapko kitne record chhod kar data dikhana he 

The MySQL LIMIT Clause
----------------------
The LIMIT clause is used to specify the number of records to return.
The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

LIMIT Syntax ---->
                    SELECT column_name(s)
                    FROM table_name
                    WHERE condition
                    LIMIT number;



LIMIT and OFFSET example ---->
-------------------------
Find the second highest salary using limit and Offset.

                Select * from employees 
                order by salary desc
                limit 1 Offset 1;



-----------------------------------------------------------------------------------------------------------------------
                                        
                                        Aggregation Function 
                                        --------------------

There are 5 types of Aggregation function available in SQL
min,max,avg,sum,count



MySQL MIN() and MAX() Functions
--------------------------------
The MIN() function returns the smallest value of the selected column.

The MAX() function returns the largest value of the selected column.


MIN() Syntax ---->
------------
                    SELECT MIN(column_name)
                    FROM table_name
                    WHERE condition;


MAX() Syntax ---->
------------
                    SELECT MAX(column_name)
                    FROM table_name
                    WHERE condition;





MySQL COUNT(), AVG() and SUM() Functions
------------------------------------------

The COUNT() function returns the number of rows that matches a specified criterion.

COUNT() Syntax ---->
--------------
                SELECT COUNT(column_name)
                FROM table_name
                WHERE condition;


The AVG() function returns the average value of a numeric column. 

AVG() Syntax ---->
------------
                SELECT AVG(column_name)
                FROM table_name
                WHERE condition;
                The SUM() function returns the total sum of a numeric column. 

SUM() Syntax ---->
------------
                SELECT SUM(column_name)
                FROM table_name
                WHERE condition;



-----------------------------------------------------------------------------------------------------------------------


                                        MySQL LIKE Operator
                                        -------------------

The MySQL LIKE Operator
-----------------------
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:

(1) The percent sign (%) represents zero, one, or multiple characters
(2) The underscore sign (_) represents one, single character


The percent sign and the underscore can also be used in combinations!





LIKE Syntax ---->
-----------
                SELECT column1, column2, ...
                FROM table_name
                WHERE columnN LIKE pattern;


Tip: You can also combine any number of conditions using AND or OR operators.



LIKE Operator	Description
WHERE CustomerName LIKE 'a%'	        Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	        Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	        Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	        Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	        Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	        Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	        Finds any values that start with "a" and ends with "o"





SQL LIKE Examples ---->
-----------------
The following SQL statement selects all customers with a CustomerName starting with "a":

Example ---->
            SELECT * FROM Customers
            WHERE CustomerName LIKE 'a%';


Note ----> 
%   ----> Represents zero or more characters	
_   ----> Represents a single character	

-----------------------------------------------------------------------------------------------------------------------

                                    MySQL IN Operator
                                    -----------------

The MySQL IN Operator
---------------------
The IN operator allows you to specify multiple values in a WHERE clause.

The IN operator is a shorthand for multiple OR conditions.



IN Syntax ---->
--------
                SELECT column_name(s)
                FROM table_name
                WHERE column_name IN (value1, value2, ...);


Example ---->
--------
                SELECT * FROM Customers
                WHERE Country IN ('Germany', 'France', 'UK');

                SELECT * FROM Customers
                WHERE Country NOT IN ('Germany', 'France', 'UK');


----------------------------------------------------------------------------------------------------------------------- 

                                            MySQL BETWEEN Operator
                                            ----------------------

The MySQL BETWEEN Operator
--------------------------
The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.

The BETWEEN operator is inclusive: begin and end values are included.




BETWEEN Syntax ---->
--------------
                    SELECT column_name(s)
                    FROM table_name
                    WHERE column_name BETWEEN value1 AND value2;



BETWEEN Example ---->
---------------
The following SQL statement selects all products with a price between 10 and 20:

                    SELECT * FROM Products
                    WHERE Price BETWEEN 10 AND 20;



NOT BETWEEN Example ---->
-------------------
To display the products outside the range of the previous example, use NOT BETWEEN:

                    SELECT * FROM Products
                    WHERE Price NOT BETWEEN 10 AND 20;  





-----------------------------------------------------------------------------------------------------------------------


                                            MySQL Aliases
                                            -------------


Aliases are used to give a table, or a column in a table, a temporary name.

Aliases are often used to make column names more readable.

An alias only exists for the duration of that query.

An alias is created with the AS keyword.





Alias Column Syntax ---->
-------------------
                    SELECT column_name AS alias_name
                    FROM table_name;


-----------------------------------------------------------------------------------------------------------------------



                                                MySQL Joins
                                                -----------


MySQL Joining Tables
--------------------
A JOIN clause is used to combine rows from two or more tables, based on a related column between them.


Supported Types of Joins in MySQL
---------------------------------
INNER JOIN: Returns records that have matching values in both tables
LEFT JOIN: Returns all records from the left table, and the matched records from the right table
RIGHT JOIN: Returns all records from the right table, and the matched records from the left table
CROSS JOIN: Returns all records from both tables





MySQL INNER JOIN Keyword
------------------------
The INNER JOIN keyword selects records that have matching values in both tables

INNER JOIN Syntax ---->
-----------------
                        SELECT column_name(s)
                        FROM table1
                        INNER JOIN table2
                        ON table1.column_name = table2.column_name;



MySQL LEFT JOIN Keyword
-----------------------
The LEFT JOIN keyword returns all records from the left table (table1), and the matching records (if any) from the right table (table2).

LEFT JOIN Syntax ---->
-----------------
                        SELECT column_name(s)
                        FROM table1
                        LEFT JOIN table2
                        ON table1.column_name = table2.column_name;


MySQL RIGHT JOIN Keyword
------------------------
The RIGHT JOIN keyword returns all records from the right table (table2), and the matching records (if any) from the left table (table1).


RIGHT JOIN Syntax ---->
                        SELECT column_name(s)
                        FROM table1
                        RIGHT JOIN table2
                        ON table1.column_name = table2.column_name;






SQL CROSS JOIN Keyword
----------------------
A CROSS JOIN in SQL returns the Cartesian product of two tables. This means that it combines every row from the first table with every row from the second table, regardless of any relationship or matching condition between them.


CROSS JOIN Syntax ---->
-----------------
                        SELECT column_name(s)
                        FROM table1
                        CROSS JOIN table2;




MySQL Self Join
---------------
A self join is a regular join, but the table is joined with itself

Self Join SQL mein ek aisi join hoti hai jisme ek hi table ko khud ke sath join kiya jata hai. Self Join ka use tab hota hai jab ek table ke records ko usi table ke dusre records ke sath compare ya relate karna hota hai.


Self Join ka concept samajhne ke liye:
-------------------------------------
Table ko do alag-alag naam (aliases) dekar treat kiya jata hai, jaise ki wo do alag tables ho.
Self Join ko usually use kiya jata hai hierarchical ya parent-child relationships ko represent karne ke liye.



Self Join Syntax ---->
----------------
                        SELECT column_name(s)
                        FROM table1 T1, table1 T2
                        WHERE condition;




Example ke sath samjhte hain:
----------------------------


Table ka naam: Employees

employee_id	employee_name	manager_id
    1	        John	        NULL
    2	        Mike	        1
    3	        Sara	        1
    4	        Tom	            2
    5	        Emma	        3



Yaha pe manager_id column employee ka manager ka ID batata hai, jo isi table me employee_id se refer hota hai.

Self Join ka use karke employees aur unke managers ko retrieve karna:
--------------------------------------------------------------------
                    SELECT e.employee_name AS Employee, m.employee_name AS Manager
                    FROM Employees e
                    LEFT JOIN Employees m
                    ON e.manager_id = m.employee_id;


Output:
------

Employee	Manager
 John	     NULL
 Mike	     John
 Sara	     John
 Tom	     Mike
Emma	     Sara





-----------------------------------------------------------------------------------------------------------------------


                                                MySQL UNION Operator
                                                ---------------------


The MySQL UNION Operator
------------------------
SQL mein UNION ka use multiple SELECT queries ke results ko combine karne ke liye hota hai. Ye distinct (unique) rows ko merge karta hai, matlab agar same row do queries me aa rahi ho, to result me wo sirf ek baar show hogi.


Key Points of UNION:
-------------------
Unique Records:-- UNION same rows ko duplicate hone nahi deta. Agar ek hi row do queries ke result me aa rahi ho, to final output me wo sirf ek baar aayegi.
S
ame Number of Columns:-- UNION lagane wali queries me column ka count same hona chahiye aur corresponding columns ka data type bhi compatible hona chahiye.

Column Names:-- Final result me jo column names aayenge wo pehli SELECT query se honge


UNION Syntax ---->
------------
                    SELECT column_name(s) FROM table1
                    UNION
                    SELECT column_name(s) FROM table2;




Example: ---->
-------
Table 1: Customers_India
                    customer_id	    name	country
                        1	        Raj	     India
                        2	        Aman 	 India
         
               
Table 2: Customers_USA
                    customer_id	    name	country
                        3	        John	USA
                        4	        Mike	USA
                        1	        Raj 	India


Agar hum dono tables ke customers ko combine karna chahte hain:


Query ---->
            SELECT customer_id, name, country 
            FROM Customers_India
            UNION
            SELECT customer_id, name, country 
            FROM Customers_USA;



Result:
            customer_id	    name	country
                1	        Raj	    India
                2	        Aman	India
                3	        John	USA
                4	        Mike	USA






UNION ALL: 
---------
Agar aapko duplicate rows bhi dikhani ho, to aap UNION ALL use kar sakte ho. Ye duplicate records ko bhi show karega.

Example ---->
-------
                    SELECT customer_id, name, country 
                    FROM Customers_India
                    UNION ALL
                    SELECT customer_id, name, country 
                    FROM Customers_USA;



Result of UNION ALL:
                    customer_id	    name	country
                        1	        Raj	     India
                        2	        Aman	 India
                        3	        John	 USA
                        4	        Mike	 USA
                        1	        Raj	     India


Summary:

UNION: Duplicate records ko remove karta hai.
UNION ALL: Sabhi records ko, including duplicates, show karta hai.



-----------------------------------------------------------------------------------------------------------------------




                                    MySQL GROUP BY Statement
                                    ------------------------

MySQL ka GROUP BY statement use hota hai jab hume kisi column ke unique values ke basis pe rows ko group karna hota hai. Ye aggregation ke sath commonly use hota hai, jaise COUNT(), SUM(), AVG(), etc., takki hum specific group ke liye calculation kar sakein.

Syntax:---->
------
            SELECT column_name(s), aggregate_function(column_name)
            FROM table_name
            WHERE condition
            GROUP BY column_name(s);


Example:---->
-------
Maan lo tumhare paas ek employees table hai, jisme employees ka department aur salary ki details hain. Ab agar tumhe har department ki total salary nikalni hai, to tum GROUP BY ka use kar sakte ho.

            SELECT department, SUM(salary) AS total_salary
            FROM employees
            GROUP BY department;



Is query me humne department ke hisaab se employees ko group kiya hai aur har department ki total salary ko calculate kiya hai using SUM() function.


Important Points:
-----------------
GROUP BY ke sath jo bhi column use karte ho, wo SELECT clause me hona chahiye.
GROUP BY ke sath aggregate functions (jaise COUNT(), MAX(), SUM(), etc.) ka use hota hai to perform calculations on grouped data.
GROUP BY hamesha WHERE ke baad aur ORDER BY se pehle aata hai.


-----------------------------------------------------------------------------------------------------------------------




                                        MySQL HAVING Clause
                                        -------------------

The MySQL HAVING Clause
-----------------------
The HAVING clause allows you to apply conditions on grouped data, filtering the results after aggregation. Unlike the WHERE clause, which filters rows before grouping, the HAVING clause is used to filter groups based on aggregate values.



HAVING Syntax ---->
-------------
                    SELECT column_name(s)
                    FROM table_name
                    WHERE condition
                    GROUP BY column_name(s)
                    HAVING condition
                    ORDER BY column_name(s);


-----------------------------------------------------------------------------------------------------------------------

                                        MySQL EXISTS Operator
                                        ---------------------

The EXISTS operator in MySQL is used to check whether a subquery returns any rows. It returns TRUE if the subquery produces one or more rows, and FALSE if it produces no rows. This makes EXISTS useful for testing the existence of records without needing to actually return the data from the subquery.

Syntax ---->
            SELECT column_name(s)
            FROM table_name
            WHERE EXISTS (subquery);


-----------------------------------------------------------------------------------------------------------------------



                                        MySQL ANY and ALL Operators
                                        ---------------------------

MySQL mein ANY aur ALL operators ka use comparison ke liye hota hai, jab hum subqueries ke sath kaam karte hain. Ye operators humko multiple values ke against comparison karne ki facility dete hain jo subquery return karti hai. Chalo isko simple hindi + english (Hinglish) mein samjhte hain:

1. ANY Operator:
----------------
ANY ka matlab hota hai "kisi bhi".
Iska use tab hota hai jab aapko check karna ho ki koi value ek ya zyada values mein se kisi bhi value ke equal ya usse bada/chhota hai.


Syntax: ---->
-------
                SELECT column_name
                FROM table_name
                WHERE column_name operator ANY (subquery);


operator yahan par koi bhi comparison operator ho sakta hai, jaise =, >, <, >=, etc.



Example:
Maan lo hamare paas ek Products table hai:


product_id | product_name | price
----------------------------------
1          | Phone        | 1000
2          | Laptop       | 2000
3          | Tablet       | 1500
Aur ek Orders table hai:


order_id | product_id | quantity
-------------------------------
101      | 1          | 2
102      | 3          | 5


Agar hum yeh dekhna chahte hain ki kaunse products ki price kisi bhi product se zyada hai jo order me diya gaya hai, to hum aise likh sakte hain:


                        SELECT product_name
                        FROM Products
                        WHERE price > ANY (
                        SELECT price
                        FROM Orders
                    );

Explanation:
-------------
Is query mein ANY check karta hai ki price kisi bhi product ka us price se zyada hai jo Orders mein return hoti hai.
Agar koi bhi product ka price match ho jata hai ya zyada hota hai, to wo result aa jayega.







2. ALL Operator:
----------------
ALL ka matlab hota hai "sabhi".
Iska use tab hota hai jab aapko check karna ho ki koi value subquery ke return hone wale har ek value ke sath satisfy karti hai.

Syntax: ---->
-------
                SELECT column_name
                FROM table_name
                WHERE column_name operator ALL (subquery);

operator yahan bhi koi comparison operator hota hai jaise =, >, <, etc.


Example: ---->
-------
Maan lo hum wahi Products table use kar rahe hain, aur hum dekhna chahte hain kaunse products ka price sabhi products ki price se zyada hai jo orders mein hain:


                            SELECT product_name
                            FROM Products
                            WHERE price > ALL (
                            SELECT price
                            FROM Orders
                            );


Explanation:
-----------
Is case mein, ALL check karega ki price sabhi orders mein jitne bhi prices return ho rahe hain, un sab se zyada hai ya nahi.
Agar Products table mein koi product ka price sabhi orders ki price se zyada hai, tabhi wo result return karega.




-----------------------------------------------------------------------------------------------------------------------



