1. Features of Python.

Answer --> 
    1. Easy to Learn and Use
    2. Open-Source and Free
    3. Interpreted Language
    4. Cross-Platform
    5. Object-Oriented and Procedural
    6. Large Standard Library
    7. Dynamically Typed
    8. High-Level Language
    9. Integration Friendly



_____________________________________________________________________________________________________________________


2. Data types in Python.
Answer -->
    Data type is a classification of like which type of value variable can hold.
    In python there are various type of data type available
 

    Numeric	            int, float, complex	            10, 3.14, 2+3j
    Text	            str	                            "Python"
    Sequence	        list, tuple, range	            [1, 2, 3], (4, 5), range(5)
    Set	                set, frozenset	                {1, 2, 3}, frozenset([4, 5])
    Mapping	            dict	                        {"key": "value"}
    Boolean	            bool	                        True, False
    Binary	            bytes, bytearray, memoryview	b"data", bytearray(5)
    None	            NoneType                       	None



_____________________________________________________________________________________________________________________



3. Set and Frozenset in Python ?
Answer -->

    1. What is a Set?

        A set is a collection of unique and unordered elements in Python.

        Key Points:
        Mutable: You can add or remove elements.
        No Duplicates: Automatically removes duplicate elements.
        Unordered: No indexing or slicing (e.g., no set[0]).
        Optimized for Membership Testing: Checking if an item exists in a set is fast.

        Example --->

            my_set = {1, 2, 3, 4, 4}  # Duplicates are removed
            print(my_set)  # Output: {1, 2, 3, 4}

            my_set.add(5)  # Add an element
            my_set.remove(2)  # Remove an element
            print(my_set)  # Output: {1, 3, 4, 5}



    2. What is a Frozenset?
        A frozenset is an immutable version of a set. Once created, it cannot be changed (no adding or removing elements).

        Key Points:
        Immutable: Cannot be modified after creation.
        Hashable: Can be used as a key in a dictionary or an element in another set.
        Unordered: Like a set, it does not support indexing or slicing.

        Example -->

        my_frozenset = frozenset([1, 2, 3, 4])
        print(my_frozenset)  # Output: frozenset({1, 2, 3, 4})

        # Immutable, so these operations are not allowed:
        # my_frozenset.add(5) -> Raises AttributeError
        # my_frozenset.remove(2) -> Raises AttributeError


    3. Differences Between Set and Frozenset ?

        Feature	                        Set	                            Frozenset
        Mutability	                    Mutable	                        Immutable
        Duplicates Allowed	             No	                                No
        Hashable	                     No	            Yes (can be used as a dictionary key or set element)
        Modifications	    Supports adding/removing elements	Does not allow modifications
        Usage	                    Dynamic collections	Fixed collections (e.g., when elements shouldn't change)


_____________________________________________________________________________________________________________________


4. Tuple and list in Python.
Answer -->

        List --> List is a collection of iteams. list store different type of data like int , float , str , bool etc.
                 list is a mutable means once we define so we can change the structure we can add something we can delete something and also we can add something.list is a ordered collection. and list is define using square bracets [].

        Tuple --> Tuple is a collection of iteam. tuple is also store different type of data like int , 
                float ,str , bool etc. tuple is immutable means once we define tuple so we can not change the structure means we can not add , delete , update and etc. tuple is also ordered collection. and its defined using paranthesis ().



    Differences between List and Tuple
    ___________________________________

                        List                                               Tuple
        1.  List is a Mutable. means once we defined            Tuple is a Immutable means once we defined so we can
            so we can change the structure we can               not change the structure we can not update ,delete,
            add , delete , update list element.                 and add.

        2. List is defined using square brackets[].             Tuple is defined using parentheses ().

        3. List is Slow.                                        Tuple is Fast    

        4. List consume more memory Because it is               Tuple Consume less memory Because it is a Fixed
           Dynamic collection.                                  collection.

        5. List can store any type of data.                     Tuple can also store any type of data.

        6. Lists are not hashable                               Tuples are hashable (can be used as dictionary 
           (cannot be used as dictionary keys).	                keys if they contain only hashable objects).
           



_____________________________________________________________________________________________________________________

5. Generators and iterators ?
Answer-->
________

        Iterators --> 
        __________
        An iterator is a powerful concept in Python that helps you to access the elements of a collection one at a time, But iterator store whole collection in a memory. so it comsume more memory. but whenever we working of large data set and we want to access one value at a time so we can use iterator

        It implements two special methods:

        1. __iter__(): This method initializes the iterator and returns the iterator object itself.
        2. __next__(): This method returns the next element in the collection. When there are no more elements to   iterate over, it raises a StopIteration exception.



        Example -->

        l = [1,2,3,4,5,6,7,8,9,10]

        it = iter(l)

        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))
        print(next(it))  # Give stopIteration error



        Generator --->
        ___________

        A generator in Python is a special type of iterator that allows you to iterate over a sequence of values, but unlike a normal iterator, it doesn't store the entire sequence in memory at once. Instead, a generator produces each value on the fly (lazily) when requested, making it more memory-efficient, especially when working with large data sets or streams of data.

        
        Defining a Generator in Python
        ______________________________

        A generator is defined using a function, but instead of using return, it uses yield. When yield is used, the function becomes a generator.


        Example ->
        _________

        # A generator function that yields numbers from 1 to 5
        def my_generator():
            for i in range(1, 6):
                yield i  # Yielding one value at a time

        # Create a generator object
        gen = my_generator()

        # Access the values one by one using next()
        print(next(gen))  # Output: 1
        print(next(gen))  # Output: 2
        print(next(gen))  # Output: 3
        print(next(gen))  # Output: 4
        print(next(gen))  # Output: 5



_____________________________________________________________________________________________________________________


6. iter() and next() in Python.
Answer ->
________

    1. iter() Function:
    ___________________
    The iter() function is used to convert an iterable (like a list, tuple, or string) into an iterator and if you print the iterator so its return the iterator objects.


    2. next() Function:
    ___________________
    The next() function is used to get the next item from the iterator, one at a time.

    How next() works:
    Each time you call next(), it returns the next item in the sequence.
    If the iterator is exhausted (all items have been returned), next() raises a StopIteration exception.




_____________________________________________________________________________________________________________________

7. Multithreading and multiprocessing in Python.
Answer -->
_______

    Multithreading -->
    ______________

    Multithreading is a technique where a program can perform multiple tasks At the same time by dividing the work into smaller chunks called "threads". Each thread runs independently, so your program can do more things at the same time.

    In Python , we can use threding module to implements multithreading


    Why Use Multithreading?
    _______________________
    
    1. Concurrency: 
        Allows multiple tasks to run at the same time, improving the responsiveness of applications.
        Example: Handling user input while performing background computations.

    2. Efficient I/O Operations: 
        Useful for tasks like file reading, database queries, or network requests where threads can perform other operations while waiting for I/O to complete.


    Basic Multithreading Example -
    _____________________________
    import threading
    import time

    def print_numbers():
        for i in range(5):
            print(f"Thread 1: {i}")
            time.sleep(1)

    def print_letters():
        for ch in 'abcde':
            print(f"Thread 2: {ch}")
            time.sleep(1)

    # Create threads
    thread1 = threading.Thread(target=print_numbers)
    thread2 = threading.Thread(target=print_letters)

    # Start threads
    thread1.start()
    thread2.start()

    # Wait for threads to complete
    thread1.join()
    thread2.join()

    print("All threads have completed.")



_____________________________________________________________________________________________________________________



8. What is Pickling and unpickling in Python ?
Answer => pickling and unpickling is a process in python to serialize and deserialize python objects.


Pickling -> Pickling is a process to convert python object like ( list,dictionary). into the byte stream 
_________  means binary format. This byte stream can be stored in a file or transmitted over a network.



Example of Pickling ->
____________________
import pickle

# Data to pickle
data = {"name": "Alice", "age": 25, "skills": ["Python", "Machine Learning"]}

# Writing to a file
with open("data.pkl", "wb") as file:
    pickle.dump(data, file)

print("Data has been pickled and saved to 'data.pkl'.")





Unpickling -> Unpickling is a reverse process of pickling it convert the byte stream into the python objects 
-----------   It reads the binary data and recreates the object in memory.




Example of Unpickling ->
----------------------

import pickle

with open("data.pkl", "rb") as file:
    loaded_data = pickle.load(file)

print("Unpickled data:", loaded_data)




Why we use Pickling and unpickling ->
-----------------------------------
1. Data persistence: Save program data to a file for later use.
2. Data sharing: Share Python objects between programs or processes.
3. Complex data handling: Serialize Python-specific data types (e.g., custom classes) that JSON can't handle.
4. Performance: Easier and faster for Python-only projects.



_____________________________________________________________________________________________________________________




9. Currying in Python ?
Answer ->

Curring is a technique in the functional programming. Where a function that takes multiple arguments is converted into a sequence of functions, each function taking one argument.

In simple terms, currying allows us to break down a function that takes several parameters into multiple smaller functions, each accepting a single argument.




Why We Use Currying:
____________________
1. Reusability: We can partially apply a function by fixing some arguments and passing the remaining ones later.

2. Cleaner Code: Currying helps break down the code into smaller, modular functions, making the code more readable and maintainable.

3. Flexibility: Currying makes it easy to create new functions by applying some arguments first and using them later for different contexts.



Example of curring :
_______________________

def multiply(x):
    def multiply_by_y(y):
        def multiply_by_z(z):
            return x * y * z
        return multiply_by_z
    return multiply_by_y

# Pehle ek argument fix karte hain
partial_function = multiply(2)

# Baad mein baaki arguments pass karenge
result = partial_function(3)(4)  # 2 * 3 * 4 = 24
print(result)  # Output: 24




_____________________________________________________________________________________________________________________


10. Explain the concept of variable scoping in Python and provide examples of how global and local variables 
    are accessed within different scopes.

Answer ->

Scope is the region or area in the program where a variable is defined and determines where that variable can be accessed or modified.

Python follows a specific set of rules to look up and assign values to variables depending on where they are declared. This is  established by the LEGB rule:


1. Local Scope ->A variable is in the local scope if it is defined inside a function. It can only be accessed 
                    within that function.

    Example -> 
        def greet():
        message = "Hello, World!"  # Local variable
        print(message)

        greet()
        # print(message)  # Error! message is local to greet() function




2. Global Scope
A variable is in the global scope if it is defined outside of any function. It can be accessed both inside and outside functions.

Example ->
            x = 10  # Global variable

            def print_x():
                print(x)  # Accessing the global variable 'x'

            print_x()  # Prints 10
            print(x)   # Also prints 10 outside the function




3.Enclosing Scope (Nested Functions)
A variable in an enclosing scope refers to a variable that is defined in an outer (enclosing) function and can be accessed by an inner (nested) function.

Example ->
            def outer_function():
                outer_var = "I'm in the outer function"  # Variable in outer function
                
                def inner_function():
                    print(outer_var)  # Accessing variable from outer function
                
                inner_function()

            outer_function()



4. Built-in Scope
Python provides a set of built-in functions and objects, like print(), len(), etc., which are always accessible and available globally.


Example ->
print(len("Hello"))






_____________________________________________________________________________________________________________________


11. Shellow Copy and Deep Copy ?
Answer -> 


Whenever we work with mutable objects and want to create a copy, we have two types of copies available: shallow copy and deep copy.


1. Shellow Copy => 

A shallow copy creates a new object and copies the references of the nested objects instead of duplicating them. If you update a nested object in the copied object, the changes will also reflect in the original object because both share the same reference to the nested object.


Example =>

        import copy

        original = [1, 2, [3, 4]]  # Original list with a nested list
        shallow_copy = copy.copy(original)  # Create a shallow copy

        # Modify the nested object in the copied list
        shallow_copy[2][0] = 99

        print("Original:", original)  # Output: [1, 2, [99, 4]]
        print("Shallow Copy:", shallow_copy)  # Output: [1, 2, [99, 4]]


        We can also use copy function 
        Example =>

        original = {1, 2, 3}
        shallow_copy = original.copy()

        print("Original:", original)
        print("Shallow Copy:", shallow_copy)



2. Deep Copy =>
  
  A deep copy creates a completely independent copy of an object. Unlike a shallow copy, a deep copy does not share references to nested objects between the original and the copy. If you make changes to the nested objects in the copy, it will not affect the original object.


Example =>


            import copy

            l = [10,20,30,40,50,[1,2,3,4]]

            deep_copy_example = copy.deepcopy(l)

            # print(deep_copy_example)

            deep_copy_example[5][1] = 20


            print("origin :- ",l)
            print("Copy :- ",deep_copy_example)




_____________________________________________________________________________________________________________________


12. What is GIL (Global Interpreter Lock) ?
Answer =>

GIL stands for Global Interpreter Lock it is a mechanism that ensure that only one task executing at a time.
This means that even if you have a multiple thread in your program. and only one thread  executing at a time.



Why GIL exist in python
_______________________
Memory management: 

The GIL helps to manage memory safely in Python, especially when there are multiple threads running. Without the GIL, threads could try to access and modify the same piece of memory simultaneously, causing race conditions and other bugs.



How Does GIL Affect Multithreading?
___________________________________
1. Single-threaded performance (No problem with GIL)
In a single-threaded program, the GIL is not an issue because there’s only one thread running. The program will work as expected, and it can take full advantage of the CPU core it’s running on.

2. Multithreaded programs (GIL slows things down)
In a multithreaded program (where you have more than one thread running), the GIL limits performance because it only allows one thread to run Python code at a time. So even if you have a multi-core processor, Python threads won't run in parallel on those cores. Instead, they take turns running, which can result in less efficient performance for CPU-heavy tasks.






_____________________________________________________________________________________________________________________


13. What is the purpose of the @property decorator in Python?
Answer =>


The @property decorator in Python is a way to define a getter method that can be accessed like an attribute. In other words, it allows a method to be called without parentheses (like an attribute), but still perform some logic or computation behind the scenes.


Example ->

class Circle:
    def __init__(self, radius):
        self._radius = radius  # Private attribute

    @property
    def radius(self):
        return self._radius

    @radius.setter
    def radius(self, value):
        if value < 0:
            raise ValueError("Radius cannot be negative!")
        self._radius = value

circle = Circle(5)
print(circle.radius)  # Output: 5
circle.radius = 10    # Updates radius to 10
print(circle.radius)  # Output: 10
circle.radius = -1    # Raises ValueError




_____________________________________________________________________________________________________________________




14. How does Python handle exceptions? Explain how you can handle exceptions in Python.
Answer =>


So in python the exception handling is the process its protect our application from the runtime error.


i give two senerio
suppose if you are working on a project and during excution any error occurs in your program so you can fix this error easily
but the second senerio suppose you have deployed you'r application and now some errror occurs in your application so it is posible error can crash your application
so for this case we can use exception handling 

where we define try , except and finally and else block

in main functionality i know some error occures in future so i will defined the main logic inside the try block and if try block occurs any errror so my except block will excute>



Example =>



try:
    # Main functionality that might raise an error
    result = some_function()
except SomeSpecificError:
    # Handle the error if it occurs
    print("An error occurred!")
else:
    # Runs if no error occurs
    print("Operation successful!")
finally:
    # Always runs, no matter what
    print("Cleanup tasks done.")





_____________________________________________________________________________________________________________________


15. What is a metaclass in Python and how does it differ from regular classes?
Answer =>

Metaclass is a special type of a class in python. its control the process of creating class. Whenever you create a new class so python internally it is use metaclass for creting a class.


Example =>

# Apna ek metaclass banate hain
class MyMeta(type):
    def __new__(cls, name, bases, dct):
        print(f"Class {name} create ki ja rahi hai.")
        return super().__new__(cls, name, bases, dct)

# Ab hum ek class banayenge jisme yeh metaclass use hoga
class MyClass(metaclass=MyMeta):
    pass

# Jab yeh run hoga, output yeh hoga:
# Class MyClass create ki ja rahi hai.


_____________________________________________________________________________________________________________________



16. What is polymorphism in object-oriented programming, and how is it implemented in Python?
Answer =>


The polymorphism is a core concept of object oriented programming. polymorphism means "Many form"
You can use the same function , operation and method in different ways depending on a objects or a data type.

One technique example is like + operator because the + operator add two integer and the + operator also concetention
of two string so the  name of operator perform different operation according to objects and data type.



Example of polymorphism =>

class Dog:
    def speak(self):
        return "Woof!"

class Cat:
    def speak(self):
        return "Meow!"

# Using the same method
dog = Dog()
cat = Cat()

print(dog.speak())  # Output: Woof!
print(cat.speak())  # Output: Meow!






1. Method Overriding => Method overrinding is the process when a child class provides its own implementation of 
                        a method that is already defined in the parent class.
                        It is used in a inheritance.


Example =>

class Parent:
    def greet(self):
        print("Hello from Parent!")

class Child(Parent):
    def greet(self):  # Overriding the greet method
        print("Hello from Child!")

# Example of overriding
obj = Child()
obj.greet()  # Output: Hello from Child!



How we can solve this problem =>
___________________________________

class A:
    def getdata(self):
        print("Parent class Info")
        
        
class B(A):
    def getdata(self):
        # A.getdata(self)
        # super().getdata()
        print("Child class info")
        
        
obj = B()
obj.getdata()





2 Method Overloading => Method Overloading is the process where we define multiple method with the same name but
_______________________  different number of parameters or different type of parameters.

In python method Overloading is not posible directly - so we can use a different way to implement method Overloading
in python like using -

1. Using variable length arguments
Example =>

class Calculator:
    def add(self, *args):
        return sum(args)

# Example Usage
calc = Calculator()
print(calc.add(10))              # 10
print(calc.add(10, 20))          # 30
print(calc.add(10, 20, 30, 40))  # 100




2. using multipledispatch
Example =>

from multipledispatch import dispatch

# Define overloaded methods
@dispatch(int, int)
def add(a, b):
    return a + b

@dispatch(float, float)
def add(a, b):
    return a + b

@dispatch(str, str)
def add(a, b):
    return a + " " + b

# Example usage
print(add(1, 2))           # 3 (integer addition)
print(add(1.5, 2.5))       # 4.0 (float addition)
print(add("Hello", "World"))  # "Hello World" (string concatenation)





_____________________________________________________________________________________________________________________


17. How Python memory management works ?
Answer =>

Python memory management is a process like how Python handles memory for your program. When you create something like a variable, list, or dictionary, Python allocate memory automatically. and When you’re done using it, Python deallocate memory automatically.


In python memory management python uses two tools - 
1. Reference count
2. Garbage collection



1. Reference Counting => 

Reference counting is a mechanism where every object in Python keeps track of the number of references pointing to it. When an object's reference count drops to zero, it means no part of the program is using that object, and Python automatically deallocates its memory.


Example of Referece Counting =>

a = [1, 2, 3]  # List object created; reference count = 1
b = a           # Another reference to the same object; reference count = 2
c = a           # Another reference; reference count = 3

del b           # One reference removed; reference count = 2
del c           # Another reference removed; reference count = 1
del a           # Last reference removed; reference count = 0, object is deleted


You can also check the reference counting =>

import sys

a = [10,20,30,40]

print("The reference count of :- ",sys.getrefcount(a))

b = a

print("The reference count of :- ",sys.getrefcount(a))




2. Garbage Colletion =>









Why Is It Important?
_______________________
Good memory management ensures your program doesn’t crash or run out of memory.
Python handles most of it automatically, so you don’t have to worry about it (unlike languages like C or C++ where you have to manually free memory).

    

 